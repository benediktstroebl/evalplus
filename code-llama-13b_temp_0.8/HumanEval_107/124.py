
def even_odd_palindrome(n):
    """
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """
    even_count = 0
    odd_count = 0

    # Generate all palindromes with odd number of digits (e.g. 121, 323, 525, ...)
    #
    # Palindromes with odd number of digits can be generated by multiplying a palindrome
    # with even number of digits (e.g. 11, 22, ...) with an integer (e.g. 2, 3, ...).
    #
    # 11 * 2 = 22
    # 22 * 2 = 44
    # 33 * 2 = 66
    # 44 * 2 = 88
    # 55 * 2 = 110
    # ...
    # 99 * 2 = 198
    #
    for x in range(1, 10):
        for y in range(0, 5):
            nx = x * 10 + x
            ny = (x * 10 + y) * 10 + y * 10 + x
            if ny <= n:
                if ny % 10 == 0:
                    even_count += 1
                else:
                    odd_count += 1

    # Generate all palindromes with even number of digits (e.g. 11, 22, 33, ...)
    #
    # Palindromes with even number of digits can be generated by multiplying a palindrome
    # with odd number of digits (e.g. 11, 33, ...) with an integer (e.g. 2, 3, ...).
    #
    # 11 * 2 = 22
    # 33 * 2 = 66
    # 55 * 2 = 110
    # 77 * 2 = 154
    # 99 * 2 = 198
    #
    for x in range(0, 10):
        for y in range(1, 10):
            nx = x *
