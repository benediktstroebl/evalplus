```python
def encode_cyclic(s: str):
    """
    returns encoded string by cycling groups of three characters.
    # split string to groups Each of length 3
    groups = s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)
    # cycle elements in each group
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return "".join(groups)

def decode_cyclic(s: str):
    """
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """
    verified by encode_cyclic function
    """
    return s == encode_cyclic(s)

# Example usage
test_encode_cyclic("hello world")
test_encode_cyclic("ii")
test_encode_cyclic("ll")
test_encode_cyclic("xx")
test_decode_cyclic("xxy")
test_decode_cyclic("vvl")
test_decode_cyclic("")
```
The provided Python script defines a self-contained function, `encode_cyclic`, that converts a given string into a markdown-like encoded format. The `decode_cyclic` function is designed to reverse this encoding process, ensuring that it can successfully decode any input string generated by `encode_cyclic`. The script then includes a series of tests that validate the functionality of these functions.