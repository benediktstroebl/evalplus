```python
def fib4(n: int):
    if n == 0 or n == 1:
        return 0
    elif n == 2:
        return 2
    else:
        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)

def test_fib4():
    assert fib4(5) == 4
    assert fib4(6) == 8
    assert fib4(7) == 14
    assert fib4(8) == 28
    assert fib4(9) == 56

# Call the function with different values of n to test it
test_fib4()
```
The Fibonacci number sequence is a sequence of numbers where each number is the sum of the two preceding ones. This sequence is generated by adding the last two numbers in the sequence and then repeatedly adding the result to the next number.

The function `fib4` calculates the n-th element of the Fibonacci number sequence efficiently by using a recursive approach. It starts with 0, 1, 2, and then continues to calculate the next number by adding the last three numbers together. 

It uses a simple if-else structure to determine if `n` is 0, 1, or 2. Then, based on the value of `n`, it returns the corresponding Fibonacci number or continues with the recursive call to `fib4(n-1)` or `fib4(n-2)`.  The `test_fib4` function tests the `fib4` function by asserting that the result of `fib4(5)`, `fib4(6)`, `fib4(7)`, and `fib4(8)` are equal to the expected values.  The result_fib4 function is designed to be efficient and handle a large range of values for `n`, making it suitable for practical use in various scenarios.