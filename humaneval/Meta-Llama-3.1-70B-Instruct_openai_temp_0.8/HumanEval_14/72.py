```python
from typing import List

def all_prefixes(string: str) -> List[str]:
    """
    Return list of all prefixes from shortest to longest of the input string

    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """
    return [string[:i+1] for i in range(len(string))]

# Example usage:
print(all_prefixes('abc'))  # Outputs: ['a', 'ab', 'abc']

# Test cases:
assert all_prefixes('abc') == ['a', 'ab', 'abc']
assert all_prefixes('') == []
assert all_prefixes('a') == ['a']
assert all_prefixes('abcde') == ['a', 'ab', 'abc', 'abcd', 'abcde']
```

In this script, we define a function `all_prefixes` that generates all prefixes of a given input string. The function uses a list comprehension to create a list of prefixes, where each prefix is generated by slicing the input string up to a certain index `i+1`. The function returns this list of prefixes.

We also include some test cases to verify the correctness of the function.