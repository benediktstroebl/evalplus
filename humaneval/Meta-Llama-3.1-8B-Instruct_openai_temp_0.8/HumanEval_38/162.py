Here's a self-contained Python script that provides the `encode_cyclic` and `decode_cyclic` functions:
```markdown
### Cyclic Encoding and Decoding Script

This script provides functions for cyclically encoding and decoding strings.
Encrypted strings are generated by shifting every third character.

#### Code
```python
def encode_cyclic(s: str):
    """
    Returns encoded string by cycling groups of three characters.

    :param s: The input string to be encoded.
    :return: The encoded string.
    """
    # Split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # Cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return "".join(groups)


def decode_cyclic(s: str):
    """
    Takes as input string encoded with encode_cyclic function. Returns decoded string.

    :param s: The encoded input string.
    :return: The decoded string.
    """
    # Initialize an empty list to store decoded groups
    decoded_groups = []
    # Initialize index of characters we are in the string
    i = 0
    while i < len(s):
        # If we are at the end of the string, break out of the loop
        if i + 2 >= len(s):
            decoded_groups.append(s[i:])
            break
        # If group has fewer elements than 3, just append group as is
        elif len(s[i:]) < 3:
            decoded_groups.append(s[i:])
            break
        # Otherwise cycle elements in the group
        else:
            decoded_groups.append(s[i + 1:i + 3] + s[i])
            i += 3
        i += 1
    return "".join(decoded_groups)


# Example usage
if __name__ == "__main__":
    original_string = "Hello, World!"
    encoded_string = encode_cyclic(original_string)
    print(f"Original String: {original_string}")
    print(f"Encoded String: {encoded_string}")

    decoded_string = decode_cyclic(encoded_string)
    print(f"Decoded String: {decoded_string}")
```

#### Explanation

The `encode_cyclic` function splits the input string into groups of 3 characters, then shifts the first character of each group to the end.

The `decode_cyclic` function works by iterating over the input string in groups of 3. It checks for each group if it has fewer elements than 3, and if so, it appends the group as is. Otherwise, it cycles the elements in the group.

The example usage demonstrates how to use the `encode_cyclic` and `decode_cyclic` functions to encode and decode a string.