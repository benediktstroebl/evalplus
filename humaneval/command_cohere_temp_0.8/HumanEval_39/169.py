Here is a Python script with a self-contained function that solves the problem:
```python
def is_prime(n):
    """
    Checks if a number is prime
    """
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def prime_fib(n):
    """
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    """
    # Make sure n is positive
    n = abs(n)
    # Initialize variables for the first two Fibonacci numbers
    a, b = 0, 1
    count = 0

    while True:
        # Check if the next Fibonacci number is prime
        if is_prime(a):
            count += 1
            if count == n:
                return a
            a, b = b, a + b

        # Make sure the loop doesn't run forever
        if a > 100:
            break

    return None

# Tests
assert prime_fib(1) == 2
assert prime_fib(2) == 3
assert prime_fib(3) == 5
assert prime_fib(4) == 13
assert prime_fib(5) == 89
assert prime_fib(6) == nil
```

This script defines a function `prime_fib` that uses a Fibonacci sequence to generate prime numbers. It makes sure that the n-th number generated by the sequence is prime. The function checks if a number is prime using the `is_prime` function, initializing two variables `a` and `b` as the first two numbers of the sequence. It then iterates through the sequence, checking if each number is prime. Once the count of prime numbers reaches `n`, the function returns that prime number. If `n` is greater than the number of prime Fibonacci numbers encountered so far, it returns `None` as no answer can be found. 

The `is_prime` function is also included, which checks if a given number is prime using a basic algorithm. This function is called to determine if each number in the Fibonacci sequence is prime.