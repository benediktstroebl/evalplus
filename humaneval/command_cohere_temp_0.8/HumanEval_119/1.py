```python
def match_parens(lst):
    def shift(s):
        ret = []
        left = 0
        for char in s:
            if char == '(':
                left += 1
            else:
                ret.append(left)
                left -= 1
        if left != 0:
            return False
        return ret
    
    if len(lst) != 2:
        return "Invalid input"
    
    # reverse the second string
    lst.append(shift(lst.pop()))
    
    # stack all sequences and see if they are equal
    stack = [shift(s) for s in lst]
    if stack[0] != stack[1]:
        return "No"
    
    return "Yes"
```

This Python script provides a function `match_parens()` that takes in a list `lst` containing two strings consisting of open parentheses `'('` or close parentheses `')'` only. This function aims to determine if it's possible to concatenate these two strings in some order to form a balanced parentheses string.

The function uses a helper function `shift()` to calculate the shifts (sequences of numbers) generated by each string. It iterates through each character in the string, incrementing a 'left' variable for '(' characters and decrementing it for ')' characters. The result is a sequence of numbers that represents the necessary shifts to make the string balanced.

For each string, the `shift()` function is called, and the resulting sequences are stacked. If these sequences are not equal, it means a concatenation of these strings will not result in a balanced string, and the function returns "No". Otherwise, it returns "Yes", indicating that a balanced string can be formed.

The script also includes some error handling to check for invalid inputs, such as a list with more than two strings, and returns appropriate messages for these cases.