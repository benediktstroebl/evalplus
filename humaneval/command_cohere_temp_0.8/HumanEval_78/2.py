```python
import re

def hex_key(num):
    primes = ['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37']
    hex_digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']
    prime_count = 0

    # check if the number is an empty string or a hexadecimal number
    if re.match(r'^[0-9A-F]+$', num) and num:
        # convert hexadecimal string to an integer to simplify the rest of the algorithm
        num = int(num, 16)

        while num > 0:
            # divide the number by 2 to find the prime numbers
            num //= 2
            prime_count += (num & 1)

            # add the prime numbers found to the list of primes
            for i in range(0, len(primes)):
                if num == primes[i]:
                    prime_count += 1
                    break

            # remove the prime numbers from the list of primes to avoid counting them twice (or more)
            for i in range(0, len(primes)):
                if primes[i] == str(num):
                    primes.remove(primes[i])
                    break

        # count the number of prime hexadecimal digits
        for digit in hex_digits:
            if digit in primes:
                prime_count += 1

    return prime_count
```

The problem is solved by first matching the input to an empty string or a string that contains only hexadecimal digits. If the input is correct, it is converted to an integer to simplify the following steps. Prime numbers are generated by repeatedly dividing the number by 2 and recording the remainders. Each prime number found is added to the list of primes, and each prime digit found is added to the prime count. To prevent counting prime digits more than once, the list of primes is constantly updated. Eventually, all prime digits are counted.

The code provides a `hex_key` function that solves the problem as described in the code block prompt. You can also add test cases to verify the function.  It returns the number of hexadecimal digits that are primes. 

For the given examples we have:
```
# For num = "AB" the output should be 1.
1 ==== hex_key("AB")

# For num = "1077E" the output should be 2.
2 ==== hex_key("1077E")

# For num = "ABED1A33" the output should be 4.
4 ==== hex_key("ABED1A33")

# For num = "123456789ABCDEF0" the output should be 6.
6 ==== hex_key("123456789ABCDEF0")

# For num = "2020" the output should be 2.
2 ==== hex_key("2020")
```