```python
def get_odd_collatz(n):
    odd_collatz = [1]
    while len(odd_collatz) < len(str(n)):
        if odd_collatz[-1] % 2 == 0:
            odd_collatz.append(odd_collatz[-1] // 2)
        else:
            odd_collatz.append(3 * odd_collatz[-1] + 1)
    return odd_collatz

if __name__ == "__main__":
    import unittest

    class TestGetOddCollatz(unittest.TestCase):
        def test_get_odd_collatz_1(self):
            self.assertEqual(get_odd_collatz(1), [1])
        def test_get_odd_collatz_5(self):
            self.assertEqual(get_odd_collatz(5), [1, 5])
        def test_get_odd_collatz_10(self):
            self.assertEqual(get_odd_collatz(10), [1, 5, 10])
        def test_get_odd_collatz_100(self):
            self.assertEqual(get_odd_collatz(100), [1, 3, 5, 7, 10, 12, 14, 16, 17, 19, 21, 23, 25, 27, 29])
    unittest.main()
```

This code defines a function `get_odd_collatz` that takes a positive integer `n` as input and returns a sorted list containing only the odd numbers in the Collatz sequence of `n`. The Collatz sequence for any positive integer `n` is generated by the following rules: If the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The Collatz sequence for the number 1 is [1].

The code also includes a self-contained test suite, defined using the `unittest` module, which checks the correctness of the `get_odd_collatz` function for various test cases. Specifically, it tests the function with inputs of `1`, `5`, `10`, and `100`, and verifies that the output is correctly sorted and contains only odd numbers.