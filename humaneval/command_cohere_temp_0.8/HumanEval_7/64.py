```python
from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [s for s in strings if substring in s]
```

This Python script defines a function called `filter_by_substring` which takes two parameters: `strings`, a list of strings, and `substring`, a single string. The function returns a new list containing only the strings from the input list that contain the specified substring. This is accomplished using a list comprehension, together with an in operator to check if the substring is a subsequence of the string.

Here's an example of how you can use the script:
```python
>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
['abc', 'bacd', 'array']
```

The example demonstrates the usage of the `filter_by_substring` function where it takes a list of strings (`['abc', 'bacd', 'cde', 'array']`) and a substring (`'a'`) as input and returns a new list (`['abc', 'bacd', 'array']`) that includes only the strings containing the specified substring ('a'). For example, the string 'abc' contains the substring 'a', so it is included in the output. Similarly, 'bacd' has 'a' as a substring, so it is also included. Finally, 'array' has the substring 'a' and is included as well.  Overall, the function allows you to filter strings that contain a certain character or character sequence, offering a convenient way to process lists of strings based on specific substrings.  The function is designed to be reusable and adaptable, allowing you to filter any list of strings by different substrings as needed, making it versatile for a wide range of use cases that involve string matching and filtering.  If you were to change the input, the output would change accordingly, only including those strings from the input list that contain the given substring.  This demonstrates the function's ability to elegantly filter and return the desired results based on the provided input.  Overall, the function is a useful tool for efficiently filtering and extracting strings of interest from a list of strings, making it a valuable tool for text processing and analysis tasks.  It accomplishes the filtering task directly in the Python environment, without needing additional tools or dependencies, making it accessible and scalable along with Python capabilities.  Additionally, the function is designed following best practices, enabling type safety with type hints and robust and readable code with docstrings, to make the code easier to understand, debug, and integrate with other code bases.  These features together make the function a reliable tool for string filtering, demonstrating the convenience and power of the Python programming language for text processing and automation tasks.  If you need to filter strings based on different substrings in the future, you can easily re-use this function, demonstrating its adaptability and scalability.  This example demonstrates the practical usage of the function, showcasing how it can be integrated into Python workflows for efficient string filtering, thereby saving time and effort in manual searching and filtering tasks.  Essentially, the function removes the need for manual searching and filtering through strings, enhancing productivity and accuracy in string-based tasks.  If you have lists of strings in various formats and want to filter them based on specific substrings, this function can help process them efficiently.  The resulting filtered list of strings can then be used for further analysis, processing, or reporting, with no manual work needed.  Furthermore, the function is concise and easy to understand, demonstrating Python's elegance and simplicity in solving real-