```python
from typing import List
from itertools import dropwhile


def all_prefixes(string: str) -> List[str]:
    """ Return list of all prefixes from shortest to longest of the input string """
    return list(reversed(list(dropwhile(lambda x: x != '', string))));
```
The function `all_prefixes()` uses the `dropwhile()` function from the `itertools` module to iterate over the strings generated by `prefixes()`. The `dropwhile()` function drops elements that fulfill a specified condition, in this case, the condition is set to `x != ''` which makes the function ignore empty strings as the prefixes loop goes on. The resulting strings are then reversed to ensure the shortest prefixes are first in the list. 
The function includes type annotations using the `from typing import List` statement, which also enhances code readability. Additionally, the function includes a docstring to provide a clear and concise description of the functionality.

To test this function, you can run the following code:
```python
test_strings = ['abc', 'ab', 'a', 'xyz', '']
for test_str in test_strings:
    assert all_prefixes(test_str) == sorted(list(set(test_str)))
```
This block of code uses the `assert` statement to verify that the output of `all_prefixes()` is correct. The assertion checks that the output conforms to the length of the input, and that it does not contain any duplicate elements. To achieve this, the code uses the `sorted()` function to order the output in a predefined order, and the `list()` and `set()` functions to ensure that no duplicate elements exist in the output.