```python
from typing import List
from itertools import dropwhile


def all_prefixes(string: str) -> List[str]:
    """ Return list of all prefixes from shortest to longest of the input string """
    return list(reversed(list(dropwhile(lambda x: x != '', string))));
```
The above code reverses the list generated by the `dropwhile` function so that the prefixes are arranged in the correct order (from shortest to longest).

The `dropwhile` function drops elements from the iterable (`string` in this case) as long as the predicate returns `True`. In this case, the predicate is a lambda function that checks if the current prefix is empty (`lambda x: x != ''`). This results in dropping all prefixes until an empty prefix is reached, i.e., the first prefix.

The list of prefixes is then reversed to ensure the shortest prefix comes first. Adding this reversal step is necessary since the `dropwhile` function drops elements from the end of the iterable. Reversing the list preserves the desired order of prefixes from shortest to longest.