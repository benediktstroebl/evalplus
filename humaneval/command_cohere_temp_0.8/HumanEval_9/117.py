Here is a Python script with a self-contained function that solves the problem:
```python
from typing import List, Tuple

def rolling_max(numbers: List[int], rolling_window: int) -> List[int]:
    return [max(numbers[i:i+rolling_window]) for i in range(len(numbers) - rolling_window + 1)]
```

The `rolling_max` function takes in a list of integers `numbers` and an integer `rolling_window` as input. It returns a list of integers that represents the rolling maximum elements observed during the sequence up to any given point. The list is generated by using a list comprehension that iterates through the index `i` from -`rolling_window` to `len(numbers)-1`, where `rolling_window` is the window of elements considered at any given moment. At each step, the max function is used to compare the elements within the window to return the maximum. 

This solution effectively calculates the rolling maximum elements in the sequence.  By passing the `rolling_window` parameter,  you can adjust the size of the rolling window desired for your specific use case.