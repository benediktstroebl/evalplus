```python
def fix_spaces(text):
    new_text = []
    for c in text:
        if c == ' ':
            if len(new_text) == 0 or new_text[-1] != '-':
                new_text.append('_')
            else:
                new_text.append(c)
        else:
            new_text.append(c)
    return ''.join(new_text)
``` 

The above `fix_spaces` function iterates over the input text, and whenever it encounters a space character, it checks the previous character in the text (by accessing `new_text[-1]`) â€“ if the previous character is not an underscore or `-`, it replaces the current space with an underscore. Otherwise, it keeps the space character. The output is then generated by joining the modified string fragments `new_text` in the loop. 

The approach allows us to efficiently handle all the corner cases as per the given problem statement.