```python
def reverse_delete(s, c):
    delete = [char for char in c]
    reverse = s[::-1]
    result = ''.join(char for char in s if char not in delete and char in reverse)
    return result, result == result[::-1]
```

The function `reverse_delete()` takes two strings, `s` and `c`, as input and returns a tuple containing the result string after deleting characters in `s` that are present in `c`, along with a boolean indicating whether the resulting string is a palindrome.

To solve the problem, the script uses two arrays `delete` and `reverse`: 
 1. The `delete` array is populated with characters from string `c`, which are characters targeted for deletion.
 2. The `reverse` string is a reversed version of string `s`. This is used to confirm that the characters which are not deleted are reversible to validate if the resulting string is a palindrome.

The resulting string is then generated by iterating through `s` and adding characters to the `result` string if they are not in the `delete` array and are present in the `reverse` string. The function returns the `result` string along with a boolean indicating whether it is a palindrome. 

This approach ensures that all desired characters are correctly deleted while identifying if the resulting string is a palindrome. 

This problem can also be solved using `set()` functionality to identify the set difference between characters in `s` and `c` and then checking if the remainder is a palindrome but this solution exceeds the complexity requirement.