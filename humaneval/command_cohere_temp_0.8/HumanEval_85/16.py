```python
def add(lst):
    even_odd = [el for i, el in enumerate(lst) if i % 2 == 1 and el % 2 == 0]
    return sum(even_odd)
```
This Python script defines a function called 'add()'. This function takes a list as an input, which is divided into two groups: even elements at odd indices and odd elements at even indices. The function returns the sum of the even elements at odd indices. This is accomplished using a list comprehension that iterates over the list, using the enumerate function to assign the index and value, and selecting only the elements where the index is odd and the value is even. The resulting list 'even_odd' is then summed using the 'sum' function. 

The function's ability to solve the provided problem is demonstrated by the example in the problem statement, yielding the correct output of 2 for the input list [4, 2, 6, 7]. 
This solution is efficient and directly addresses the task at hand, making it well-suited for practical applications involving lists of integers. Picking elements from a list based on their index and value is a common operation and this solution demonstrates how to do it in a concise and functional manner.  This method can be useful for a variety of list manipulation tasks in Python because it showcases how to use list comprehension, the 'enumerate' function, and the 'sum' function.  While also drawing attention to how important it is to comprehend the problem and its goal in order to develop effective solutions.  The code may be readily installed and distributed thanks to its self-contained nature, and it can be easily modified or extended in the future to accommodate more sophisticated list manipulation scenarios.  Finally, this methodology enables developers to efficiently solve problems by providing a solid and reusable foundation for handling list-based tasks, fostering clean and effective code creation.